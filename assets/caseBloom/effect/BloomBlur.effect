
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: fx-bloom-blur-vs:vert
      frag: fx-bloom-blur-fs:frag
      properties:
        windowStep:  { value: 0.01, editor: { displayName: window step X size, range: [0, 0.1] } }
}%

CCProgram fx-bloom-blur-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>
  #include <cc-fog-vs>

  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    v_uv = a_texCoord;

    return In.position;
  }
}%

CCProgram fx-bloom-blur-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog-fs>

  in vec2 v_uv;

  #pragma builtin(global)
  layout(set = 0, binding = 9) uniform sampler2D cc_gbuffer_emissiveMap;
  #pragma builtin(global)
  layout(set = 0, binding = 10) uniform sampler2D cc_lighting_resultMap;

  uniform Constants {
    float windowStep;
  };

  #define WINDOW_SIZE 5.

  vec4 frag () {
    vec4 col = vec4(0., 0., 0., 0.);

#if DIRECTIONX
    col += texture(cc_gbuffer_emissiveMap, v_uv);
    for (float i = 1.; i <= WINDOW_SIZE; i += 1.) {
      col += texture(cc_gbuffer_emissiveMap, v_uv + vec2(i * windowStep, 0.));
      col += texture(cc_gbuffer_emissiveMap, v_uv - vec2(i * windowStep, 0.));
    }
#else
    col += texture(cc_lighting_resultMap, v_uv);
    for (float i = 1.; i <= WINDOW_SIZE; i += 1.) {
      col += texture(cc_lighting_resultMap, v_uv + vec2(0., i * windowStep));
      col += texture(cc_lighting_resultMap, v_uv - vec2(0., i * windowStep));
    }
#endif

    col /= (WINDOW_SIZE * 2. + 1.);

    return CCFragOutput(col);
  }
}%
