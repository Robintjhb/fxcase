
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: fx-bloom2-merge-vs:vert
      frag: fx-bloom2-merge-fs:frag
      properties:
        texSize:    { value: [1, 1] }
        screenTex:  { value: white }
        temp2Tex:   { value: white }
}%

CCProgram fx-bloom2-merge-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>
  #include <cc-fog-vs>

  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    v_uv = a_texCoord;

    return In.position;
  }
}%

CCProgram fx-bloom2-merge-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog-fs>

  in vec2 v_uv;

  uniform sampler2D screenTex;
  uniform sampler2D temp2Tex;
  uniform Constants {
    vec2 texSize;
  };

  #define WINDOW_SIZE 5.

  vec4 frag () {
    vec4 col = vec4(0., 0., 0., 0.);

    col += texture(screenTex, v_uv);
    col += texture(temp2Tex, v_uv);

    return CCFragOutput(col);
  }


/*
  #include <common>
  varying vec2 vUv;
  uniform sampler2D colorTexture;
  uniform vec2 texSize;
  uniform vec2 direction;

  float gaussianPdf(in float x, in float sigma) {
    return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
  }

  void main() {
    vec2 invSize = 1.0 / texSize;
    float fSigma = float(SIGMA);
    float weightSum = gaussianPdf(0.0, fSigma);
    vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;
    for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
      float x = float(i);
      float w = gaussianPdf(x, fSigma);
      vec2 uvOffset = direction * invSize * x;
      vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;
      vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;
      diffuseSum += (sample1 + sample2) * w;
      weightSum += 2.0 * w;
    }
    gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
  }
*/


}%

