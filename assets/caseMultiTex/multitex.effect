// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        spriteTexture1: { value: grey }
        spriteTexture2: { value: white }
        spriteTexture3: { value: white }
        spriteTexture4: { value: white }
        spriteTexture5: { value: white }
        spriteTexture6: { value: white }
        spriteTexture7: { value: white }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform sampler2D spriteTexture1;
  uniform sampler2D spriteTexture2;
  uniform sampler2D spriteTexture3;
  uniform sampler2D spriteTexture4;
  uniform sampler2D spriteTexture5;
  uniform sampler2D spriteTexture6;
  uniform sampler2D spriteTexture7;


  float getCalVal(float texID) {
    return step(-0.5, -step(texID, -0.5) - step(0.5, texID));
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float texID = color.x * 255.;

/*
      if (texID == 0.0) {
        o *= texture(cc_spriteTexture, uv0);
      } else if (texID == 1.0) {
        o *= texture(cc_spriteTexture2, uv0);
      } else if (texID == 2.0) {
        o *= texture(cc_spriteTexture3, uv0);
      } else if (texID == 3.0) {
        o *= texture(cc_spriteTexture4, uv0);
      } else if (texID == 4.0) {
        o *= texture(cc_spriteTexture5, uv0);
      } else if (texID == 5.0) {
        o *= texture(cc_spriteTexture6, uv0);
      } else if (texID == 6.0) {
        o *= texture(cc_spriteTexture7, uv0);
      } else if (texID == 7.0) {
        o *= texture(cc_spriteTexture8, uv0);
      }
*/
      o = vec4(0., 0., 0., 0.);
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(cc_spriteTexture,  uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture1, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture2, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture3, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture4, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture5, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture6, uv0);
      texID -= 1.;
      o += getCalVal(texID) * CCSampleWithAlphaSeparated(spriteTexture7, uv0);



      #if IS_GRAY
        // float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        // o.r = o.g = o.b = gray;
      #endif
    #endif

    // o *= color;
    // ALPHA_TEST(o);
    return o;
  }
}%
